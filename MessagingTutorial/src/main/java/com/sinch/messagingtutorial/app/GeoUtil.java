package com.sinch.messagingtutorial.app;import com.google.android.gms.maps.model.LatLng;import org.json.JSONArray;import org.json.JSONObject;import java.io.InputStream;import java.io.InputStreamReader;import java.io.Reader;import java.io.UnsupportedEncodingException;import java.net.URL;import java.net.URLConnection;import java.net.URLEncoder;import java.util.concurrent.Callable;import java.util.concurrent.FutureTask;public class GeoUtil {	public static String getAddressByLatLng(LatLng latLng) {		String addr = "";		// �P�B		LatLngToAddress ga = new LatLngToAddress(latLng);		FutureTask<String> future = new FutureTask<String>(ga);		new Thread(future).start();		try {			addr = future.get();		} catch (Exception e) {					}		return addr;	}	public static LatLng getLatLngByAddress(String address) {		LatLng latLng = null;		// �P�B		AddressToLatLng ga = new AddressToLatLng(address);		FutureTask<LatLng> future = new FutureTask<LatLng>(ga);		new Thread(future).start();		try {			latLng = future.get();		} catch (Exception e) {							}		return latLng;	}		private static class HttpUtil {		public static String get(String urlString) throws Exception {			InputStream is = null;			Reader reader = null;			StringBuilder str = new StringBuilder();			URL url = new URL(urlString);			URLConnection URLConn = url.openConnection();			URLConn.setRequestProperty("User-agent", "IE/6.0");			is = URLConn.getInputStream();			reader = new InputStreamReader(is, "UTF-8");			char[] buffer = new char[1];			while (reader.read(buffer) != -1) {				str.append(new String(buffer));			}			return str.toString();		}	}	// Geo��Address	static class LatLngToAddress implements Callable<String> {		private String queryURLString = "http://maps.googleapis.com/maps/api/geocode/json?latlng=%s,%s&sensor=true&language=zh_tw";		private String address = "Not fund !";;		private LatLng latLng;		LatLngToAddress(LatLng latLng) {			this.latLng = latLng;		}		@Override		public String call() {			// ��J�n�g�ױo��a�}			address = getAddressByLocation();			return address;		}		public String getAddressByLocation() {			String urlString = String.format(queryURLString, latLng.latitude, latLng.longitude);			try {				// ���o json string				String jsonStr = HttpUtil.get(urlString);				// ���o json �ڰ}�C�`�I results				JSONArray results = new JSONObject(jsonStr)						.getJSONArray("results");				if (results.length() >= 1) {					// ���o results[0]					JSONObject jsonObject = results.getJSONObject(0);					// ���o formatted_address �ݩʤ��e					address = jsonObject.optString("formatted_address");				}			} catch (Exception e) {				e.printStackTrace(System.err);			}			return address;		}	}	// Address��Geo�a�}	static class AddressToLatLng implements Callable<LatLng> {		private String queryURLString = "http://maps.googleapis.com/maps/api/geocode/json?address=%s&sensor=false&language=zh_tw";		private String address;		AddressToLatLng(String address) {			this.address = address;		}		@Override		public LatLng call() {			LatLng latLng = null;			try {				// // ��J�a�}�o��n�g��(����a�}�ݳz�LURLEncoder�s�X)				latLng = getLocationByAddress(URLEncoder.encode(address, "UTF-8"));			} catch (UnsupportedEncodingException e) {			}			return latLng;		}		public LatLng getLocationByAddress(String address) {			String urlString = String.format(queryURLString, address);			LatLng latLng = null;			try {				// ���o json string				String jsonStr = HttpUtil.get(urlString);				// ���o json �ڰ}�C�`�I results				JSONArray results = new JSONObject(jsonStr)						.getJSONArray("results");				System.out.println("results.length() : " + results.length());				if (results.length() >= 1) {					// ���o results[0]					JSONObject jsonObject = results.getJSONObject(0);					// ���o geometry --> location ����					JSONObject laln = jsonObject.getJSONObject("geometry")							.getJSONObject("location");										latLng = new LatLng(Double.parseDouble(laln.getString("lat")), Double.parseDouble(laln.getString("lng")));				}			} catch (Exception e) {				e.printStackTrace(System.err);			}			return latLng;		}	}}